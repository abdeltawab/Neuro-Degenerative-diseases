"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[843],{8984:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>o});var s=i(4848),l=i(8453);const r={sidebar_label:"umap",title:"analysis.umap"},d=void 0,a={id:"reference/analysis/umap",title:"analysis.umap",description:"logger\\_config",source:"@site/docs/reference/analysis/umap.md",sourceDirName:"reference/analysis",slug:"/reference/analysis/umap",permalink:"/VAME/docs/reference/analysis/umap",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{sidebar_label:"umap",title:"analysis.umap"},sidebar:"docsSidebar",previous:{title:"tree_hierarchy",permalink:"/VAME/docs/reference/analysis/tree_hierarchy"},next:{title:"videowriter",permalink:"/VAME/docs/reference/analysis/videowriter"}},t={},o=[{value:"logger_config",id:"logger_config",level:4},{value:"logger",id:"logger",level:4},{value:"umap_embedding",id:"umap_embedding",level:4},{value:"umap_vis",id:"umap_vis",level:4},{value:"umap_label_vis",id:"umap_label_vis",level:4},{value:"umap_vis_comm",id:"umap_vis_comm",level:4},{value:"visualize_umap",id:"visualize_umap",level:4}];function c(e){const n={code:"code",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h4,{id:"logger_config",children:"logger_config"}),"\n",(0,s.jsx)(n.h4,{id:"logger",children:"logger"}),"\n",(0,s.jsx)(n.h4,{id:"umap_embedding",children:"umap_embedding"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def umap_embedding(\n        cfg: dict, session: str, model_name: str, n_clusters: int,\n        segmentation_algorithm: SegmentationAlgorithms) -> np.ndarray\n"})}),"\n",(0,s.jsx)(n.p,{children:"Perform UMAP embedding for given file and parameters."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"cfg"})," (",(0,s.jsx)(n.code,{children:"dict"}),"): Configuration parameters."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"session"})," (",(0,s.jsx)(n.code,{children:"str"}),"): Session name."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"model_name"})," (",(0,s.jsx)(n.code,{children:"str"}),"): Model name."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"n_clusters"})," (",(0,s.jsx)(n.code,{children:"int"}),"): Number of clusters."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"segmentation_algorithm"})," (",(0,s.jsx)(n.code,{children:"str"}),"): Segmentation algorithm."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"np.ndarray"}),": UMAP embedding."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"umap_vis",children:"umap_vis"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def umap_vis(embed: np.ndarray, num_points: int) -> plt.Figure\n"})}),"\n",(0,s.jsx)(n.p,{children:"Visualize UMAP embedding without labels."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"embed"})," (",(0,s.jsx)(n.code,{children:"np.ndarray"}),"): UMAP embedding."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"num_points"})," (",(0,s.jsx)(n.code,{children:"int"}),"): Number of data points to visualize."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"plt.Figure"}),": Plot Visualization of UMAP embedding."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"umap_label_vis",children:"umap_label_vis"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def umap_label_vis(embed: np.ndarray, label: np.ndarray,\n                   num_points: int) -> plt.Figure\n"})}),"\n",(0,s.jsx)(n.p,{children:"Visualize UMAP embedding with motif labels."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"embed"})," (",(0,s.jsx)(n.code,{children:"np.ndarray"}),"): UMAP embedding."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"label"})," (",(0,s.jsx)(n.code,{children:"np.ndarray"}),"): Motif labels."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"num_points"})," (",(0,s.jsx)(n.code,{children:"int"}),"): Number of data points to visualize."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"plt.Figure"}),": Plot figure of UMAP visualization embedding with motif labels."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"umap_vis_comm",children:"umap_vis_comm"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def umap_vis_comm(embed: np.ndarray, community_label: np.ndarray,\n                  num_points: int) -> plt.Figure\n"})}),"\n",(0,s.jsx)(n.p,{children:"Visualize UMAP embedding with community labels."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"embed"})," (",(0,s.jsx)(n.code,{children:"np.ndarray"}),"): UMAP embedding."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"community_label"})," (",(0,s.jsx)(n.code,{children:"np.ndarray"}),"): Community labels."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"num_points"})," (",(0,s.jsx)(n.code,{children:"int"}),"): Number of data points to visualize."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"plt.Figure"}),": Plot figure of UMAP visualization embedding with community labels."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"visualize_umap",children:"visualize_umap"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"@save_state(model=VisualizeUmapFunctionSchema)\ndef visualize_umap(config: dict,\n                   segmentation_algorithm: SegmentationAlgorithms,\n                   label: Optional[str] = None,\n                   save_logs: bool = False) -> None\n"})}),"\n",(0,s.jsx)(n.p,{children:'Visualize UMAP embeddings based on configuration settings.\nFills in the values in the "visualization" key of the states.json file.\nSaves results files at:'}),"\n",(0,s.jsx)(n.p,{children:"If label is None (UMAP visualization without labels):"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["project_name/","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["results/","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["file_name/","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["model_name/","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["segmentation_algorithm-n_clusters/","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["community/","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"umap_embedding_file_name.npy"}),"\n",(0,s.jsx)(n.li,{children:"umap_vis_label_none_file_name.png  (UMAP visualization without labels)"}),"\n",(0,s.jsx)(n.li,{children:"umap_vis_motif_file_name.png  (UMAP visualization with motif labels)"}),"\n",(0,s.jsx)(n.li,{children:"umap_vis_community_file_name.png  (UMAP visualization with community labels)"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"config"})," (",(0,s.jsx)(n.code,{children:"dict"}),"): Configuration parameters."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"segmentation_algorithm"})," (",(0,s.jsx)(n.code,{children:"SegmentationAlgorithms"}),"): Which segmentation algorithm to use. Options are 'hmm' or 'kmeans'."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"label"})," (",(0,s.jsx)(n.code,{children:"str, optional"}),"): Type of labels to visualize. Options are None, 'motif' or 'community'. Default is None."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"save_logs"})," (",(0,s.jsx)(n.code,{children:"bool, optional"}),"): Save logs to file. Default is False."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"None"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>a});var s=i(6540);const l={},r=s.createContext(l);function d(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:d(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);