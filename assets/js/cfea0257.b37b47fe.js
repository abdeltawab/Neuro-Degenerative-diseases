"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2480],{9717:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var s=t(4848),r=t(8453);const i={sidebar_label:"create_training",title:"model.create_training"},a=void 0,l={id:"reference/model/create_training",title:"model.create_training",description:"logger\\_config",source:"@site/docs/reference/model/create_training.md",sourceDirName:"reference/model",slug:"/reference/model/create_training",permalink:"/VAME/docs/reference/model/create_training",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{sidebar_label:"create_training",title:"model.create_training"},sidebar:"docsSidebar",previous:{title:"nwb",permalink:"/VAME/docs/reference/io/nwb"},next:{title:"dataloader",permalink:"/VAME/docs/reference/model/dataloader"}},o={},c=[{value:"logger_config",id:"logger_config",level:4},{value:"logger",id:"logger",level:4},{value:"traindata_aligned",id:"traindata_aligned",level:4},{value:"create_trainset",id:"create_trainset",level:4}];function d(e){const n={code:"code",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h4,{id:"logger_config",children:"logger_config"}),"\n",(0,s.jsx)(n.h4,{id:"logger",children:"logger"}),"\n",(0,s.jsx)(n.h4,{id:"traindata_aligned",children:"traindata_aligned"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def traindata_aligned(config: dict,\n                      sessions: List[str] | None = None,\n                      test_fraction: float | None = None,\n                      read_from_variable: str = "position_processed") -> None\n'})}),"\n",(0,s.jsx)(n.p,{children:"Create training dataset for aligned data.\nSave numpy arrays with the test/train info to the project folder."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"config"})," (",(0,s.jsx)(n.code,{children:"dict"}),"): Configuration parameters dictionary."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"sessions"})," (",(0,s.jsx)(n.code,{children:"List[str], optional"}),"): List of session names. If None, all sessions will be used. Defaults to None."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"test_fraction"})," (",(0,s.jsx)(n.code,{children:"float, optional"}),"): Fraction of data to use as test data. Defaults to 0.1."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"None"})}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"create_trainset",children:"create_trainset"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"@save_state(model=CreateTrainsetFunctionSchema)\ndef create_trainset(config: dict, save_logs: bool = False) -> None\n"})}),"\n",(0,s.jsx)(n.p,{children:'Creates a training and test datasets for the VAME model.\nFills in the values in the "create_trainset" key of the states.json file.\nCreates the training dataset for VAME at:'}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["project_name/","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["data/","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["session00/","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"session00-PE-seq-clean.npy"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["session01/","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"session01-PE-seq-clean.npy"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["train/","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"test_seq.npy"}),"\n",(0,s.jsx)(n.li,{children:"train_seq.npy"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The produced -clean.npy files contain the aligned time series data in the\nshape of (num_dlc_features - 2, num_video_frames)."}),"\n",(0,s.jsx)(n.p,{children:"The produced test_seq.npy contains the combined data in the shape of (num_dlc_features - 2, num_video_frames * test_fraction)."}),"\n",(0,s.jsx)(n.p,{children:"The produced train_seq.npy contains the combined data in the shape of (num_dlc_features - 2, num_video_frames * (1 - test_fraction))."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"config"})," (",(0,s.jsx)(n.code,{children:"dict"}),"): Configuration parameters dictionary."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"save_logs"})," (",(0,s.jsx)(n.code,{children:"bool, optional"}),"): If True, the function will save logs to the project folder. Defaults to False."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"None"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var s=t(6540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);