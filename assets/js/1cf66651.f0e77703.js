"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2977],{2547:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var t=s(4848),r=s(8453);const i={sidebar_label:"pose_segmentation",title:"analysis.pose_segmentation"},a=void 0,l={id:"reference/analysis/pose_segmentation",title:"analysis.pose_segmentation",description:"logger\\_config",source:"@site/docs/reference/analysis/pose_segmentation.md",sourceDirName:"reference/analysis",slug:"/reference/analysis/pose_segmentation",permalink:"/VAME/docs/reference/analysis/pose_segmentation",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{sidebar_label:"pose_segmentation",title:"analysis.pose_segmentation"},sidebar:"docsSidebar",previous:{title:"gif_creator",permalink:"/VAME/docs/reference/analysis/gif_creator"},next:{title:"tree_hierarchy",permalink:"/VAME/docs/reference/analysis/tree_hierarchy"}},o={},d=[{value:"logger_config",id:"logger_config",level:4},{value:"logger",id:"logger",level:4},{value:"embedd_latent_vectors",id:"embedd_latent_vectors",level:4},{value:"estimate_dbscan_eps",id:"estimate_dbscan_eps",level:4},{value:"tune_dbscan_parameters",id:"tune_dbscan_parameters",level:4},{value:"get_motif_usage",id:"get_motif_usage",level:4},{value:"same_segmentation",id:"same_segmentation",level:4},{value:"individual_segmentation",id:"individual_segmentation",level:4},{value:"segment_session",id:"segment_session",level:4}];function c(e){const n={code:"code",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h4,{id:"logger_config",children:"logger_config"}),"\n",(0,t.jsx)(n.h4,{id:"logger",children:"logger"}),"\n",(0,t.jsx)(n.h4,{id:"embedd_latent_vectors",children:"embedd_latent_vectors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def embedd_latent_vectors(\n        cfg: dict,\n        sessions: List[str],\n        model: RNN_VAE,\n        fixed: bool,\n        read_from_variable: str = "position_egocentric_aligned",\n        tqdm_stream: Union[TqdmToLogger, None] = None) -> List[np.ndarray]\n'})}),"\n",(0,t.jsx)(n.h4,{id:"estimate_dbscan_eps",children:"estimate_dbscan_eps"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def estimate_dbscan_eps(data: np.ndarray, k: int = 4) -> float\n"})}),"\n",(0,t.jsx)(n.p,{children:"Estimate optimal eps parameter for DBSCAN using k-distance graph method."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"data"})," (",(0,t.jsx)(n.code,{children:"np.ndarray"}),"): Input data for clustering"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"k"})," (",(0,t.jsx)(n.code,{children:"int"}),"): Number of nearest neighbors to consider (default: 4)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"float"}),": Estimated eps value"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"tune_dbscan_parameters",children:"tune_dbscan_parameters"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def tune_dbscan_parameters(data: np.ndarray, cfg: dict) -> Tuple[float, int]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Automatically tune DBSCAN parameters for the given data.\nUses iterative parameter testing to find optimal balance between\nnumber of clusters and meaningful cluster sizes."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"data"})," (",(0,t.jsx)(n.code,{children:"np.ndarray"}),"): Input data for clustering"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"cfg"})," (",(0,t.jsx)(n.code,{children:"dict"}),"): Configuration dictionary"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Tuple[float, int]"}),": Tuned (eps, min_samples) parameters"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"get_motif_usage",children:"get_motif_usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def get_motif_usage(session_labels: np.ndarray,\n                    n_clusters: int = None) -> np.ndarray\n"})}),"\n",(0,t.jsx)(n.p,{children:"Count motif usage from session label array."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"session_labels"})," (",(0,t.jsx)(n.code,{children:"np.ndarray"}),"): Array of session labels."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"n_clusters"})," (",(0,t.jsx)(n.code,{children:"int, optional"}),"): Number of clusters. For KMeans and HMM, this should be set to get fixed-length output.\nFor DBSCAN, leave as None to infer cluster count dynamically (excluding noise -1)."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"np.ndarray"}),": Motif usage counts. Length = n_clusters for fixed methods, or dynamic for DBSCAN."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"same_segmentation",children:"same_segmentation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def same_segmentation(\n    cfg: dict, sessions: List[str], latent_vectors: List[np.ndarray],\n    n_clusters: int, segmentation_algorithm: str\n) -> Tuple[List[np.ndarray], List[np.ndarray], List[np.ndarray]]\n"})}),"\n",(0,t.jsx)(n.p,{children:"Apply the same segmentation (shared clustering) to all sessions using the specified algorithm."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"cfg"})," (",(0,t.jsx)(n.code,{children:"dict"}),"): Configuration dictionary."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"sessions"})," (",(0,t.jsx)(n.code,{children:"List[str]"}),"): List of session names."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"latent_vectors"})," (",(0,t.jsx)(n.code,{children:"List[np.ndarray]"}),"): List of latent vector arrays per session."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"n_clusters"})," (",(0,t.jsx)(n.code,{children:"int"}),"): Number of clusters (only used for KMeans and HMM)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"segmentation_algorithm"})," (",(0,t.jsx)(n.code,{children:"str"}),'): One of: "kmeans", "hmm", or "dbscan".']}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Tuple of:"}),": - labels: List of np.ndarray of predicted motif labels per session."]}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"cluster_centers: List of cluster centers (KMeans only)."}),"\n",(0,t.jsx)(n.li,{children:"motif_usages: List of motif usage arrays per session."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"individual_segmentation",children:"individual_segmentation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def individual_segmentation(\n    cfg: dict, sessions: List[str], latent_vectors: List[np.ndarray],\n    n_clusters: int, segmentation_algorithm: str\n) -> Tuple[List[np.ndarray], List[np.ndarray], List[np.ndarray]]\n"})}),"\n",(0,t.jsx)(n.h4,{id:"segment_session",children:"segment_session"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@save_state(model=SegmentSessionFunctionSchema)\ndef segment_session(config: dict, save_logs: bool = False) -> None\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var t=s(6540);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);